;; Created   by https://github.com/rxyhn
;; Designed  by https://github.com/rxyhn
;; Maintained by https://github.com/pineedaa
;; Modified  by https://github.com/pineedaa

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Launcher Widgets ;;
(defwidget launcher []
	(box
    :orientation "v"
		:space-evenly "false"
		:spacing -15
  	(button
      :class "launcher_icon"
		  :onclick "rofi -show drun & disown"
      "")))

;; Workspaces Widgets ;;
(defwidget workspaces []
	(literal :content workspace))

(deflisten workspace "scripts/workspace")

;; Battery Widgets ;;
(defwidget bat []
  (overlay
    :visible "${battery-visble}"
    :class "bat-wrapper"
    :tooltip "Battery: ${jq(EWW_BATTERY, 'to_entries[0].value.capacity')}%"
    :orientation "v"
    (progress
      :class "bat-progress ${battery-class}"
      :active "false"
      :hexpand "true"
      :value "${jq(EWW_BATTERY, 'to_entries[0].value.capacity')}"
      :flipped "true"
      :orientation "v")
    (box
        :orientation "v"
        :space-evenly "false"
        :vexpand "true"
        :hexpand "true"
        (label
          :class "bat"
          :vexpand "true"
          :hexpand "true"
          :halign "center"
          :text battery))))

(defpoll battery-visble
  :interval "24h"
  :run-while "false"
  "scripts/battery is_visible")

(defpoll battery
  :interval "1s"
  :run-while battery-visble
  "scripts/battery icon")

(defpoll battery-class
  :interval "1m"
  :run-while battery-visble
  "scripts/battery class")

;; Systray Widgets ;;
(defwidget tray []
  (systray
    :class "tray"
    :hexpand "true"
    :vexpand "true"
    :orientation "v"))

;; Wifi Widgets ;;
(defwidget wifi []
	(box
    :orientation "v"
		:tooltip wifi-name
	(button
		:class "wifi-icon ${wifi-class}"
    " ")))

(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")
(defpoll wifi-class :interval "1s" "scripts/wifi class")

(defwidget notification-icon []
	(box
    :orientation "v"
		:tooltip "${unread-notifications} notificaciones sin leer"
	(button
		:class "notifications-icon ${notifications-status}"
    :onclick "scripts/notifications --toggle-notifications"
    :onrightclick "${EWW_CMD} open --toggle notification-container"
    :onmiddleclick "scripts/notifications --history"
    notifications-icon)))

(defpoll notifications-status :interval "1s" "scripts/notifications status")
(defpoll unread-notifications :interval "1s" "scripts/notifications unread")
(defpoll notifications-icon :interval "1s" "scripts/notifications icon")

(defwidget notifications []
  (box
    :orientation "v"
    (scroll
      :vscroll "true"
      :hscroll "false"
      (literal :content notifications_box)
    )))

(deflisten notifications_box :initial "" "scripts/notification_box")

;; Brightness Widgets ;;
(defwidget bright []
  (eventbox
    :onhover "${EWW_CMD} update bright=true"
  	:onhoverlost "${EWW_CMD} update bright=false"
    :visible brightness-visble
  	(box
      :orientation "v"
			:space-evenly "false"
			:spacing 2
  		(revealer
        :transition "slideup"
			  :reveal bright
				:duration "550ms"
  			(scale
          :class "bribar"
			    :value current-brightness
				  :tooltip "Brightness: ${current-brightness}%"
				  :onchange "brightnessctl set {}%"
				  :orientation "v"
				  :flipped true
				  :max 100
				  :min 5))
  		(label
        :class "brightness-icon"
			  :text ""))))

(defvar bright false)

(defpoll brightness-visble
  :interval "24h"
  :run-while "false"
  "scripts/brightness is_visible")

(defpoll current-brightness
  :interval "1s"
  :run-while bright
  "scripts/brightness get")

;; Volume Widgets ;;
(defwidget volum []
	(eventbox
    :onhover "${EWW_CMD} update volum=true"
		:onhoverlost "${EWW_CMD} update volum=false"
	(box
    :orientation "v"
		:space-evenly "false"
		:spacing "2"
	(revealer
    :transition "slideup"
		:reveal volum
	  :duration "550ms"
    (scale
      :class "volbar"
      :value current-volume
      :orientation "v"
      :flipped true
      :tooltip "Volume: ${current-volume}%"
      :max 101
      :min 0
      :onchange "scripts/volume set {}"))
	(button
    :onclick "scripts/volume --toggle-muted"
    :class "volume-icon ${volume-class}" "󰕾"))))

(defvar volum false)

(defpoll current-volume
  :interval "1s"
  :run-while volum
  "scripts/volume --vol")

(defpoll volume-class
  :interval "1s"
  "scripts/volume --class")

;; Control Panel Widgets ;;
(defwidget control []
	(box
    :orientation "v"
		:space-evenly false
		:class "control"
  (notification-icon)
  (wifi)
  (bright)
  (volum)))

;; Clock Widgets ;;
(defwidget time []
	(box
    :orientation "v"
		:class "time"
		:valign "end"
	(button
    :onclick "${EWW_CMD} open --toggle calendar"
		:class "time-hour" hour)
	(button
    :onclick "${EWW_CMD} open --toggle calendar"
		:class "time-min"  min)))

(defpoll hour	:interval "1s" "date '+%H'")
(defpoll min :interval "1s"	"date '+%M'")

;; Calendar Widgets ;;
(defwidget cal []
	(box
    :class "cal-box"
		:orientation "v"
	(box
    :class "cal-inner-box"
	(calendar
    :class "cal"
		:day calendar_day
		:month calendar_month
		:year calendar_year))))

(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_month :interval "10h" "date '+%m'")
(defpoll calendar_year :interval "10h" "date '+%Y'")

;; Powermenu Widgets ;;
(defwidget power []
	(eventbox
    :onhover "${EWW_CMD} update power=true"
		:onhoverlost "${EWW_CMD} update power=false"
    (box
      :orientation "v"
      :space-evenly "false"
      :vexpand "false"
      :class "powermenu"
    (revealer
      :transition "slideup"
      :reveal power
      :duration "550ms"
    (box
      :orientation "v"
      :space-evenly "false"
    (button
      :class "button-bspres"
      :tooltip "BSPWM Restart"
      :onclick "bspc wm -r" "󰑐" )
    (button
      :class "button-reb"
      :tooltip "Reboot"
      :onclick "reboot"	"󰜉")
    (button
      :class "button-quit"
      :tooltip "Logout"
      :onclick "killall bspwm" "󰍃")
    (button
      :class "button-lock"
      :tooltip "Lock Screen"
      :onclick "betterlockscreen -l" "󰌾")))
    (button
      :class "button-off"
      :tooltip "Shutdown"
      :onclick "shutdown now"	"󰐥"))))

(defvar power false)


;; Top Widgets ;;
(defwidget top []
	(box
    :orientation "v"
		:space-evenly "false"
		:valign "start"
  (launcher)
  (workspaces)))

;; Bottom Widgets ;;
(defwidget bottom []
	(box
    :orientation "v"
		:space-evenly false
  (time)
  (power)))

;; End Widgets ;;
(defwidget end []
	(box
    :orientation "v"
		:space-evenly "false"
		:valign "end"
		:spacing 5
  (tray)
  (bat)
  (control)
  (bottom)))

;; Bar Widgets ;;
(defwidget bar []
	(box
    :class "eww_bar"
		:orientation "v"
		:vexpand "false"
		:hexpand "false"
  (top)
  (end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Bar Windows ;;
(defwindow bar
	:geometry (geometry
              :x "0.5%"
              :y "10px"
              :height "98%"
              :width "51px")
	:monitor 0
	:reserve (struts
              :distance "61px"
					    :side "left")
  :windowtype "dock"
  :stacking "fg"
	:wm-ignore false
	:hexpand "false"
	:vexpand "false"
  (bar))

;; Calendar Windows ;;
(defwindow calendar
	:geometry (geometry
              :x "3.5%"
              :y "-1%"
              :width "270px"
              :height "60px"
              :anchor "bottom left")
  (cal))

(defwindow notification-container
	:geometry (geometry
              :x "3.5%"
              :y "-1.5%"
              :width "450px"
              :height "600px"
              :anchor "bottom left")
  (notifications))
